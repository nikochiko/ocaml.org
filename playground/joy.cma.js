// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.7.1

function loadJoy(globalThis) {

//# unitInfo: Provides: Joy__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Joy = [0], Joy$0 = [0, Joy];
   runtime.caml_register_global(0, Joy$0, "Joy__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Joy__Color
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, transparent = [0, 0, 0, 0, 0.];
   function rgb(r, g, b){return [0, r, g, b, 1.];}
   function color(opt, r, g, b){
    if(opt) var sth = opt[1], a = sth; else var a = 1.;
    return [0, r, g, b, a];
   }
   var
    black = rgb(0, 0, 0),
    white = rgb(255, 255, 255),
    red = rgb(255, 1, 1),
    green = rgb(1, 255, 1),
    blue = rgb(1, 1, 255),
    yellow = rgb(255, 255, 255),
    Joy_Color =
      [0, rgb, color, black, white, red, green, blue, yellow, transparent];
   runtime.caml_register_global(3, Joy_Color, "Joy__Color");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Joy__Shape
//# unitInfo: Requires: Joy__Color, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Joy_Color = global_data.Joy__Color;
   function point(x, y){return [0, x, y];}
   var
    origin = [0, 0, 0],
    _a_ = [4, 0],
    cst_lines_do_not_have_a_fill_f = "lines do not have a fill field!";
   function circle(opt, r){
    if(opt) var sth = opt[1], c = sth; else var c = origin;
    return [0, [0, c, r, Joy_Color[3], Joy_Color[9]]];
   }
   function polygon(vertices){
    return [3, [0, vertices, Joy_Color[3], Joy_Color[9]]];
   }
   function rectangle(opt, width, height){
    if(opt) var sth = opt[1], c = sth; else var c = origin;
    var x = c[1] - width / 2., y = c[2] - height / 2.;
    return polygon
            ([0,
              [0, x, y],
              [0,
               [0, x, y + height],
               [0, [0, x + width, y + height], [0, [0, x + width, y], 0]]]]);
   }
   function ellipse(opt, rx, ry){
    if(opt) var sth = opt[1], c = sth; else var c = origin;
    return [1, [0, c, rx, ry, 0, Joy_Color[3], Joy_Color[9]]];
   }
   function line(opt, b){
    if(opt) var sth = opt[1], a = sth; else var a = origin;
    return [2, [0, a, b, Joy_Color[3]]];
   }
   function complex(shapes){return shapes ? [4, shapes] : _a_;}
   function with_stroke(stroke, param){
    switch(param[0]){
      case 0:
       var circle = param[1];
       return [0, [0, circle[1], circle[2], stroke, circle[4]]];
      case 1:
       var ellipse = param[1];
       return [1,
               [0,
                ellipse[1],
                ellipse[2],
                ellipse[3],
                ellipse[4],
                stroke,
                ellipse[6]]];
      case 2:
       var line = param[1]; return [2, [0, line[1], line[2], stroke]];
      case 3:
       var polygon = param[1];
       return [3, [0, polygon[1], stroke, polygon[3]]];
      default:
       var complex = param[1];
       return [4,
               caml_call2
                (Stdlib_List[19],
                 function(_c_){return with_stroke(stroke, _c_);},
                 complex)];
    }
   }
   function with_fill(fill, line){
    switch(line[0]){
      case 0:
       var circle = line[1];
       return [0, [0, circle[1], circle[2], circle[3], fill]];
      case 1:
       var ellipse = line[1];
       return [1,
               [0,
                ellipse[1],
                ellipse[2],
                ellipse[3],
                ellipse[4],
                ellipse[5],
                fill]];
      case 2:
       caml_call1(Stdlib[46], cst_lines_do_not_have_a_fill_f); return line;
      case 3:
       var polygon = line[1]; return [3, [0, polygon[1], polygon[2], fill]];
      default:
       var complex = line[1];
       return [4,
               caml_call2
                (Stdlib_List[19],
                 function(_b_){return with_fill(fill, _b_);},
                 complex)];
    }
   }
   var
    Joy_Shape =
      [0,
       point,
       circle,
       rectangle,
       ellipse,
       complex,
       line,
       polygon,
       with_stroke,
       with_fill];
   runtime.caml_register_global(7, Joy_Shape, "Joy__Shape");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Joy__Util
//# unitInfo: Requires: Stdlib__Float, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Float = global_data.Stdlib__Float,
    _a_ = [0, 0, 0];
   function symbol(p1, p2){return [0, p1[1] / p2[1], p1[1] / p2[1]];}
   function symbol$0(param, scalar){
    var y = param[2], x = param[1];
    return [0, x - scalar, y - scalar];
   }
   function symbol$1(param, scalar){
    var y = param[2], x = param[1];
    return [0, x / scalar, y / scalar];
   }
   function symbol$2(param, scalar){
    var y = param[2], x = param[1];
    return [0, x * scalar, y * scalar];
   }
   function pmap(f, param){
    var y = param[2], x = param[1], _i_ = caml_call1(f, y);
    return [0, caml_call1(f, x), _i_];
   }
   function tmap(f, param){
    var y = param[2], x = param[1], _h_ = caml_call1(f, y);
    return [0, caml_call1(f, x), _h_];
   }
   function tmap3(f, param){
    var
     c = param[3],
     b = param[2],
     a = param[1],
     _f_ = caml_call1(f, c),
     _g_ = caml_call1(f, b);
    return [0, caml_call1(f, a), _g_, _f_];
   }
   function tmap4(f, param){
    var
     d = param[4],
     c = param[3],
     b = param[2],
     a = param[1],
     _c_ = caml_call1(f, d),
     _d_ = caml_call1(f, c),
     _e_ = caml_call1(f, b);
    return [0, caml_call1(f, a), _e_, _d_, _c_];
   }
   function symbol$3(f, g, x){return caml_call1(g, caml_call1(f, x));}
   function take(n, lst){
    if(0 === n) return [0, 0, lst];
    if(! lst) return _a_;
    var
     xs = lst[2],
     x = lst[1],
     match = take(n - 1 | 0, xs),
     rest = match[2],
     taken = match[1];
    return [0, [0, x, taken], rest];
   }
   function partition(n, opt, lst){
    if(opt) var sth = opt[1], step = sth; else var step = 0;
    if(! lst) return 0;
    var taken = take(n, lst)[1];
    return caml_call1(Stdlib_List[1], taken) === n
            ? [0,
              taken,
              partition(n, [0, step], caml_call1(Stdlib_List[6], lst))]
            : 0;
   }
   function range(n){
    return caml_call2(Stdlib_List[10], n, function(_b_){return _b_;});
   }
   function to_radians(degrees){return degrees * Stdlib_Float[9] / 180.;}
   var
    Joy_Util =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       pmap,
       tmap,
       tmap3,
       tmap4,
       symbol$3,
       take,
       partition,
       range,
       to_radians];
   runtime.caml_register_global(4, Joy_Util, "Joy__Util");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Joy__Transform
//# unitInfo: Requires: Joy__Util, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Joy_Util = global_data.Joy__Util,
    Stdlib = global_data.Stdlib,
    cst_Lines_do_not_have_a_fill_f = "Lines do not have a fill field!";
   function translate(dx, dy, param){
    switch(param[0]){
      case 0:
       var circle = param[1];
       return [0,
               [0,
                [0, circle[1][1] + dx, circle[1][2] + dy],
                circle[2],
                circle[3],
                circle[4]]];
      case 1:
       var ellipse = param[1];
       return [1,
               [0,
                [0, ellipse[1][1] + dx, ellipse[1][2] + dy],
                ellipse[2],
                ellipse[3],
                ellipse[4],
                ellipse[5],
                ellipse[6]]];
      case 2:
       var line = param[1];
       return [2,
               [0,
                [0, line[1][1] + dx, line[1][2] + dy],
                [0, line[2][1] + dx, line[2][2] + dy],
                line[3]]];
      case 3:
       var polygon = param[1], _U_ = polygon[3], _V_ = polygon[2];
       return [3,
               [0,
                caml_call2
                 (Stdlib_List[19],
                  function(param){
                   var y = param[2], x = param[1];
                   return [0, x + dx, y + dy];
                  },
                  polygon[1]),
                _V_,
                _U_]];
      default:
       var shapes = param[1];
       return [4,
               caml_call2
                (Stdlib_List[19],
                 function(_W_){return translate(dx, dy, _W_);},
                 shapes)];
    }
   }
   function scale(factor, param){
    switch(param[0]){
      case 0:
       var
        circle = param[1],
        _A_ = circle[4],
        _B_ = circle[3],
        _C_ = circle[2] * factor;
       return [0,
               [0,
                caml_call2
                 (Joy_Util[5], function(_T_){return _T_ * factor;}, circle[1]),
                _C_,
                _B_,
                _A_]];
      case 1:
       var
        ellipse = param[1],
        _D_ = ellipse[6],
        _E_ = ellipse[5],
        _F_ = ellipse[4],
        _G_ = ellipse[3] * factor,
        _H_ = ellipse[2] * factor;
       return [1,
               [0,
                caml_call2
                 (Joy_Util[5],
                  function(_S_){return _S_ * factor;},
                  ellipse[1]),
                _H_,
                _G_,
                _F_,
                _E_,
                _D_]];
      case 2:
       var
        line = param[1],
        _I_ = line[3],
        _J_ =
          caml_call2
           (Joy_Util[5], function(_R_){return _R_ * factor;}, line[2]);
       return [2,
               [0,
                caml_call2
                 (Joy_Util[5], function(_Q_){return _Q_ * factor;}, line[1]),
                _J_,
                _I_]];
      case 3:
       var
        polygon = param[1],
        _K_ = polygon[3],
        _L_ = polygon[2],
        _M_ = polygon[1],
        _N_ = caml_call1(Joy_Util[5], function(_P_){return _P_ * factor;});
       return [3, [0, caml_call2(Stdlib_List[19], _N_, _M_), _L_, _K_]];
      default:
       var shapes = param[1];
       return [4,
               caml_call2
                (Stdlib_List[19],
                 function(_O_){return scale(factor, _O_);},
                 shapes)];
    }
   }
   function rotate_point(degrees, point){
    var
     radians = caml_call1(Joy_Util[13], degrees),
     y = point[2],
     x = point[1],
     theta = Math.atan2(y, x),
     r = Math.sqrt(x * x + y * y),
     theta$0 = theta + radians;
    return [0, r * Math.cos(theta$0), r * Math.sin(theta$0)];
   }
   function rotate(degrees, param){
    switch(param[0]){
      case 0:
       var
        circle = param[1],
        _m_ = circle[4],
        _n_ = circle[3],
        _o_ = circle[2];
       return [0, [0, rotate_point(degrees, circle[1]), _o_, _n_, _m_]];
      case 1:
       var
        ellipse = param[1],
        _p_ = ellipse[6],
        _q_ = ellipse[5],
        _r_ = ellipse[4] + degrees | 0,
        _s_ = ellipse[3],
        _t_ = ellipse[2];
       return [1,
               [0, rotate_point(degrees, ellipse[1]), _t_, _s_, _r_, _q_, _p_]];
      case 2:
       var
        line = param[1],
        _u_ = line[3],
        _v_ = rotate_point(degrees, line[2]);
       return [2, [0, rotate_point(degrees, line[1]), _v_, _u_]];
      case 3:
       var polygon = param[1], _w_ = polygon[3], _x_ = polygon[2];
       return [3,
               [0,
                caml_call2
                 (Stdlib_List[19],
                  function(_z_){return rotate_point(degrees, _z_);},
                  polygon[1]),
                _x_,
                _w_]];
      default:
       var shapes = param[1];
       return [4,
               caml_call2
                (Stdlib_List[19],
                 function(_y_){return rotate(degrees, _y_);},
                 shapes)];
    }
   }
   function compose(f, g, x){return caml_call1(g, caml_call1(f, x));}
   function repeat(n, op, shape){
    var param = [0, n, 0];
    for(;;){
     var n$0 = param[1];
     if(0 === n$0){var shapes = param[2]; return [4, shapes];}
     var shapes$0 = param[2];
     if(shapes$0)
      var
       transformed = shapes$0[1],
       param = [0, n$0 - 1 | 0, [0, caml_call1(op, transformed), shapes$0]];
     else
      var param = [0, n$0 - 1 | 0, [0, shape, 0]];
    }
   }
   function map_stroke(f, param){
    switch(param[0]){
      case 0:
       var circle = param[1], _e_ = circle[4], _f_ = caml_call1(f, circle[3]);
       return [0, [0, circle[1], circle[2], _f_, _e_]];
      case 1:
       var
        ellipse = param[1],
        _g_ = ellipse[6],
        _h_ = caml_call1(f, ellipse[5]);
       return [1,
               [0, ellipse[1], ellipse[2], ellipse[3], ellipse[4], _h_, _g_]];
      case 2:
       var line = param[1], _i_ = caml_call1(f, line[3]);
       return [2, [0, line[1], line[2], _i_]];
      case 3:
       var
        polygon = param[1],
        _j_ = polygon[3],
        _k_ = caml_call1(f, polygon[2]);
       return [3, [0, polygon[1], _k_, _j_]];
      default:
       var complex = param[1];
       return [4,
               caml_call2
                (Stdlib_List[19],
                 function(_l_){return map_stroke(f, _l_);},
                 complex)];
    }
   }
   function map_fill(f, line){
    switch(line[0]){
      case 0:
       var circle = line[1], _a_ = caml_call1(f, circle[4]);
       return [0, [0, circle[1], circle[2], circle[3], _a_]];
      case 1:
       var ellipse = line[1], _b_ = caml_call1(f, ellipse[6]);
       return [1,
               [0,
                ellipse[1],
                ellipse[2],
                ellipse[3],
                ellipse[4],
                ellipse[5],
                _b_]];
      case 2:
       caml_call1(Stdlib[46], cst_Lines_do_not_have_a_fill_f); return line;
      case 3:
       var polygon = line[1], _c_ = caml_call1(f, polygon[3]);
       return [3, [0, polygon[1], polygon[2], _c_]];
      default:
       var complex = line[1];
       return [4,
               caml_call2
                (Stdlib_List[19],
                 function(_d_){return map_fill(f, _d_);},
                 complex)];
    }
   }
   var
    Joy_Transform =
      [0, translate, scale, rotate, compose, repeat, map_fill, map_stroke];
   runtime.caml_register_global(4, Joy_Transform, "Joy__Transform");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Joy__Random
//# unitInfo: Requires: Stdlib, Stdlib__Float, Stdlib__Option, Stdlib__Random
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib = global_data.Stdlib,
    Stdlib_Random = global_data.Stdlib__Random,
    permutation =
      [0,
        151,
        160,
        137,
        91,
        90,
        15,
        131,
        13,
        201,
        95,
        96,
        53,
        194,
        233,
        7,
        225,
        140,
        36,
        103,
        30,
        69,
        142,
        8,
        99,
        37,
        240,
        21,
        10,
        23,
        190,
        6,
        148,
        247,
        120,
        234,
        75,
        0,
        26,
        197,
        62,
        94,
        252,
        219,
        203,
        117,
        35,
        11,
        32,
        57,
        177,
        33,
        88,
        237,
        149,
        56,
        87,
        174,
        20,
        125,
        136,
        171,
        168,
        68,
        175,
        74,
        165,
        71,
        134,
        139,
        48,
        27,
        166,
        77,
        146,
        158,
        231,
        83,
        111,
        229,
        122,
        60,
        211,
        133,
        230,
        220,
        105,
        92,
        41,
        55,
        46,
        245,
        40,
        244,
        102,
        143,
        54,
        65,
        25,
        63,
        161,
        1,
        216,
        80,
        73,
        209,
        76,
        132,
        187,
        208,
        89,
        18,
        169,
        200,
        196,
        135,
        130,
        116,
        188,
        159,
        86,
        164,
        100,
        109,
        198,
        173,
        186,
        3,
        64,
        52,
        217,
        226,
        250,
        124,
        123,
        5,
        202,
        38,
        147,
        118,
        126,
        255,
        82,
        85,
        212,
        207,
        206,
        59,
        227,
        47,
        16,
        58,
        17,
        182,
        189,
        28,
        42,
        223,
        183,
        170,
        213,
        119,
        248,
        152,
        2,
        44,
        154,
        163,
        70,
        221,
        153,
        101,
        155,
        167,
        43,
        172,
        9,
        129,
        22,
        39,
        253,
        19,
        98,
        108,
        110,
        79,
        113,
        224,
        232,
        178,
        185,
        112,
        104,
        218,
        246,
        97,
        228,
        251,
        34,
        242,
        193,
        238,
        210,
        144,
        12,
        191,
        179,
        162,
        241,
        81,
        51,
        145,
        235,
        249,
        14,
        239,
        107,
        49,
        192,
        214,
        31,
        181,
        199,
        106,
        157,
        184,
        84,
        204,
        176,
        115,
        121,
        50,
        45,
        127,
        4,
        150,
        254,
        138,
        236,
        205,
        93,
        222,
        114,
        67,
        29,
        24,
        72,
        243,
        141,
        128,
        195,
        78,
        66,
        215,
        61,
        156,
        180].slice
       ();
   function hash(n){
    var _b_ = (n | 0) & 255;
    return runtime.caml_check_bound(permutation, _b_)[1 + _b_];
   }
   function grad1(hash, x){
    var
     h = hash & 15,
     grad = 1. + (h & 7),
     grad$0 = 0 === (h & 8) ? grad : - grad;
    return grad$0 * x;
   }
   function grad2(hash, x, y){
    var h = hash & 63;
    if(4 <= h) var v = x, u = y; else var v = y, u = x;
    var _a_ = 0 === (h & 2) ? 2. * v : -2. * v, u$0 = 0 === (h & 1) ? u : - u;
    return u$0 + _a_;
   }
   function snoise1(x){
    var
     i0 = Math.floor(x),
     i1 = i0 + 1.,
     x0 = x - i0,
     x1 = x0 - 1.,
     t0 = 1. - x0 * x0,
     t0$0 = t0 * t0,
     n0 = t0$0 * t0$0 * grad1(hash(i0), x0),
     t1 = 1. - x1 * x1,
     t1$0 = t1 * t1,
     n1 = t1$0 * t1$0 * grad1(hash(i1), x1);
    return 0.395 * (n0 + n1);
   }
   function snoise2(x, y){
    var
     s = (x + y) * 0.366025403,
     ys = y + s,
     xs = x + s,
     j = Math.floor(ys),
     i = Math.floor(xs),
     t = (i + j) * 0.211324865,
     X0 = i - t,
     Y0 = j - t,
     y0 = y - Y0,
     x0 = x - X0;
    if(y0 < x0) var j1 = 0., i1 = 1.; else var j1 = 1., i1 = 0.;
    var
     y1 = y0 - j1 + 0.211324865,
     x1 = x0 - i1 + 0.211324865,
     y2 = y0 - 1. + 0.42264973,
     x2 = x0 - 1. + 0.42264973,
     gi0 = hash(hash(j) + i),
     gi1 = hash(hash(j + j1) + i + i1),
     gi2 = hash(hash(j + 1.) + i + 1.);
    function contrib(x, y, gi){
     var t = 0.5 - x * x - y * y;
     if(t < 0.) return 0.;
     var t$0 = t * t;
     return t$0 * t$0 * grad2(gi, x, y);
    }
    var
     n0 = contrib(x0, y0, gi0),
     n1 = contrib(x1, y1, gi1),
     n2 = contrib(x2, y2, gi2);
    return 45.23065 * (n0 + n1 + n2);
   }
   var
    frequency = [0, 1.],
    amplitude = [0, 1.],
    lacunarity = [0, 2.],
    persistence = [0, 0.5];
   function fractal1(octaves, x){
    var noise = 0., amp = 0., i = octaves;
    for(;;){
     if(0 === i) return noise / amp;
     var
      frequency$0 = frequency[1] * Math.pow(lacunarity[1], i - 1 | 0),
      amplitude$0 = amplitude[1] * Math.pow(persistence[1], i - 1 | 0),
      i$0 = i - 1 | 0,
      amp$0 = amp + amplitude$0,
      noise$0 = noise + amplitude$0 * snoise1(x * frequency$0),
      noise = noise$0,
      amp = amp$0,
      i = i$0;
    }
   }
   function fractal2(octaves, x, y){
    var noise = 0., amp = 0., i = octaves;
    for(;;){
     if(0 === i) return noise / amp;
     var
      frequency$0 = frequency[1] * Math.pow(lacunarity[1], i - 1 | 0),
      amplitude$0 = amplitude[1] * Math.pow(persistence[1], i - 1 | 0),
      i$0 = i - 1 | 0,
      amp$0 = amp + amplitude$0,
      noise$0 =
        noise + amplitude$0 * snoise2(x * frequency$0, y * frequency$0),
      noise = noise$0,
      amp = amp$0,
      i = i$0;
    }
   }
   var
    Noise =
      [0,
       permutation,
       hash,
       grad1,
       grad2,
       snoise1,
       snoise2,
       frequency,
       amplitude,
       lacunarity,
       persistence,
       fractal1,
       fractal2],
    initialized = [0, 0],
    cst_Noise_noise_requires_1_2_e =
      "Noise noise requires 1-2 elements in arg list",
    cst_Fractal_noise_requires_1_2 =
      "Fractal noise requires 1-2 elements in arg list";
   function initialize(param){
    caml_call1(Stdlib_Random[3], 0);
    initialized[1] = 1;
    return 0;
   }
   function random(opt, max){
    if(opt) var sth = opt[1], min = sth; else var min = 0;
    if(1 - initialized[1]) initialize(0);
    return min + caml_call1(Stdlib_Random[5], max - min | 0) | 0;
   }
   function frandom(opt, max){
    if(opt) var sth = opt[1], min = sth; else var min = 0.;
    if(1 - initialized[1]) initialize(0);
    return min + caml_call1(Stdlib_Random[10], max - min);
   }
   function noise(param){
    if(! param){
     caml_call1(Stdlib[46], cst_Noise_noise_requires_1_2_e);
     return 0.;
    }
    var match = param[2], x = param[1];
    if(! match) return caml_call1(Noise[5], x);
    var y = match[1];
    return caml_call2(Noise[6], x, y);
   }
   function fractal_noise(opt, param){
    if(opt) var sth = opt[1], octaves = sth; else var octaves = 5;
    if(! param){
     caml_call1(Stdlib[46], cst_Fractal_noise_requires_1_2);
     return 0.;
    }
    var match = param[2], x = param[1];
    if(! match) return caml_call2(Noise[11], octaves, x);
    var y = match[1];
    return caml_call3(Noise[12], octaves, x, y);
   }
   function set_fractal_params
   (frequency, amplitude, lacunarity, persistence, param){
    caml_call2
     (Stdlib_Option[9], function(n){Noise[7][1] = n; return 0;}, frequency);
    caml_call2
     (Stdlib_Option[9], function(n){Noise[8][1] = n; return 0;}, amplitude);
    caml_call2
     (Stdlib_Option[9], function(n){Noise[9][1] = n; return 0;}, lacunarity);
    return caml_call2
            (Stdlib_Option[9],
             function(n){Noise[10][1] = n; return 0;},
             persistence);
   }
   var
    Joy_Random =
      [0,
       Noise,
       initialized,
       initialize,
       random,
       frandom,
       noise,
       fractal_noise,
       set_fractal_params];
   runtime.caml_register_global(41, Joy_Random, "Joy__Random");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Joy__Backend_cairo
//# unitInfo: Requires: Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst = ", ";
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    partial = [12, 10, 0],
    Stdlib_Printf = global_data.Stdlib__Printf,
    _a_ =
      [0,
       [12,
        40,
        [4,
         0,
         0,
         0,
         [11,
          cst,
          [4,
           0,
           0,
           0,
           [11,
            cst,
            [4, 0, 0, 0, [11, cst, [8, [0, 0, 0], 0, 0, [12, 41, 0]]]]]]]]],
       "(%d, %d, %d, %f)"],
    _b_ =
      [0,
       [11,
        "create: background_color=",
        [2,
         0,
         [11,
          " size=(",
          [4,
           0,
           0,
           0,
           [11,
            cst,
            [4,
             0,
             0,
             0,
             [11,
              ") line_width=",
              [4, 0, 0, 0, [11, " axes=", [9, 0, partial]]]]]]]]]],
       "create: background_color=%s size=(%d, %d) line_width=%d axes=%b\n"];
   function create(background_color, size, line_width, axes){
    var
     a = background_color[4],
     b = background_color[3],
     g = background_color[2],
     r = background_color[1],
     _d_ = size[2],
     _e_ = size[1],
     _c_ = caml_call5(Stdlib_Printf[4], _a_, r, g, b, a),
     s = caml_call6(Stdlib_Printf[4], _b_, _c_, _e_, _d_, line_width, axes);
    return [0, s, size];
   }
   function show(ctx, shapes){return 0;}
   function set_line_width(ctx, line_width){return 0;}
   function write(ctx, filename){return 0;}
   function clear(ctx){return 0;}
   var Joy_Backend_cairo = [0, create, show, set_line_width, write, clear];
   runtime.caml_register_global(3, Joy_Backend_cairo, "Joy__Backend_cairo");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Joy__Backend_lazy
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function show(ctx, shapes){return 0;}
   function create(param){return 0;}
   function clear(ctx){return 0;}
   var Joy_Backend_lazy = [0, show, create, clear];
   runtime.caml_register_global(0, Joy_Backend_lazy, "Joy__Backend_lazy");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Joy__Backend_svg
//# unitInfo: Requires: Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Stdlib, Stdlib__List, Stdlib__Printf, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst$4 = " />",
    cst$3 = '" ',
    cst_cy = '" cy="',
    cst$5 = ", ",
    cst_fill$2 = "fill",
    cst_stroke$3 = "stroke",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$2,
    cst$1 = cst$2,
    partial = [11, cst$4, 0],
    cst = " ",
    partial$0 = [11, ')" ', [2, 0, [12, 32, [2, 0, [11, cst$4, 0]]]]],
    partial$1 = [11, cst$4, 0],
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    cst_Could_not_find_element_wit = "Could not find element with id",
    _a_ =
      [0,
       [11,
        "rgba(",
        [4,
         0,
         0,
         0,
         [11,
          cst$5,
          [4,
           0,
           0,
           0,
           [11,
            cst$5,
            [4, 0, 0, 0, [11, cst$5, [8, [0, 0, 0], 0, 0, [12, 41, 0]]]]]]]]],
       "rgba(%d, %d, %d, %f)"],
    _b_ = [0, [2, 0, [11, '="', [2, 0, [12, 34, 0]]]], '%s="%s"'],
    _c_ =
      [0, [8, [0, 0, 0], 0, 0, [12, 44, [8, [0, 0, 0], 0, 0, 0]]], "%f,%f"],
    cst_fill = cst_fill$2,
    cst_stroke = cst_stroke$3,
    _d_ =
      [0,
       [11,
        '<circle cx="',
        [8,
         [0, 0, 0],
         0,
         0,
         [11,
          cst_cy,
          [8,
           [0, 0, 0],
           0,
           0,
           [11,
            '" r="',
            [8,
             [0, 0, 0],
             0,
             0,
             [11, cst$3, [2, 0, [12, 32, [2, 0, partial$1]]]]]]]]]],
       '<circle cx="%f" cy="%f" r="%f" %s %s />'],
    cst_fill$0 = cst_fill$2,
    cst_stroke$0 = cst_stroke$3,
    _e_ =
      [0,
       [11,
        '<ellipse cx="',
        [8,
         [0, 0, 0],
         0,
         0,
         [11,
          cst_cy,
          [8,
           [0, 0, 0],
           0,
           0,
           [11,
            '" rx="',
            [8,
             [0, 0, 0],
             0,
             0,
             [11,
              '" ry="',
              [8,
               [0, 0, 0],
               0,
               0,
               [11, '" transform="rotate(', [4, 0, 0, 0, partial$0]]]]]]]]]],
       '<ellipse cx="%f" cy="%f" rx="%f" ry="%f" transform="rotate(%d)" %s %s />'],
    cst_fill$1 = cst_fill$2,
    cst_stroke$1 = cst_stroke$3,
    _f_ =
      [0,
       [11,
        '<polygon points="',
        [2, 0, [11, cst$3, [2, 0, [12, 32, [2, 0, [11, cst$4, 0]]]]]]],
       '<polygon points="%s" %s %s />'],
    cst_stroke$2 = cst_stroke$3,
    _g_ =
      [0,
       [11,
        '<line x1="',
        [8,
         [0, 0, 0],
         0,
         0,
         [11,
          '" y1="',
          [8,
           [0, 0, 0],
           0,
           0,
           [11,
            '" x2="',
            [8,
             [0, 0, 0],
             0,
             0,
             [11,
              '" y2="',
              [8, [0, 0, 0], 0, 0, [11, cst$3, [2, 0, partial]]]]]]]]]],
       '<line x1="%f" y1="%f" x2="%f" y2="%f" %s />'],
    _h_ =
      [0,
       [11,
        '<svg width="',
        [4,
         0,
         0,
         0,
         [11,
          '" height="',
          [4,
           0,
           0,
           0,
           [11,
            '" xmlns="http://www.w3.org/2000/svg">',
            [2, 0, [11, "<\/svg>", 0]]]]]]],
       '<svg width="%d" height="%d" xmlns="http://www.w3.org/2000/svg">%s<\/svg>'];
   function create(size, axes, eltId){
    var
     _x_ = Js_of_ocaml_Dom_html[118][15],
     _y_ =
       Js_of_ocaml_Dom_html[2].getElementById(caml_jsstring_of_string(eltId)),
     _z_ = caml_call2(Js_of_ocaml_Js[5][4], _y_, _x_),
     elt =
       caml_call2
        (Js_of_ocaml_Js[5][8],
         _z_,
         function(param){
          return caml_call1(Stdlib[2], cst_Could_not_find_element_wit);
         });
    return [0, [0, 0], size, axes, elt];
   }
   function svg_coords_of_point(param, _w_){
    var y = _w_[2], x = _w_[1], h = param[2], w = param[1];
    return [0, x + w / 2., h / 2. - y];
   }
   function svg_color_attribute(name, color){
    var
     a = color[4],
     b = color[3],
     g = color[2],
     r = color[1],
     _v_ = caml_call5(Stdlib_Printf[4], _a_, r, g, b, a);
    return caml_call3(Stdlib_Printf[4], _b_, name, _v_);
   }
   function render_shape(ctx, s){
    switch(s[0]){
      case 0:
       var
        c$1 = s[1],
        fill = c$1[4],
        stroke = c$1[3],
        radius = c$1[2],
        c = c$1[1],
        match = svg_coords_of_point(ctx[2], c),
        cy = match[2],
        cx = match[1],
        _l_ = svg_color_attribute(cst_fill, fill),
        _m_ = svg_color_attribute(cst_stroke, stroke);
       return caml_call6(Stdlib_Printf[4], _d_, cx, cy, radius, _m_, _l_);
      case 1:
       var
        e = s[1],
        fill$0 = e[6],
        stroke$0 = e[5],
        rotation = e[4],
        ry = e[3],
        rx = e[2],
        c$0 = e[1],
        match$0 = svg_coords_of_point(ctx[2], c$0),
        cy$0 = match$0[2],
        cx$0 = match$0[1],
        _n_ = svg_color_attribute(cst_fill$0, fill$0),
        _o_ = svg_color_attribute(cst_stroke$0, stroke$0);
       return caml_call8
               (Stdlib_Printf[4], _e_, cx$0, cy$0, rx, ry, rotation, _o_, _n_);
      case 2:
       var
        l = s[1],
        stroke$2 = l[3],
        b = l[2],
        a = l[1],
        match$1 = svg_coords_of_point(ctx[2], a),
        ay = match$1[2],
        ax = match$1[1],
        match$2 = svg_coords_of_point(ctx[2], b),
        by = match$2[2],
        bx = match$2[1],
        _s_ = svg_color_attribute(cst_stroke$2, stroke$2);
       return caml_call6(Stdlib_Printf[4], _g_, ax, ay, bx, by, _s_);
      case 3:
       var
        p = s[1],
        fill$1 = p[3],
        stroke$1 = p[2],
        vertices = p[1],
        string_of_point =
          function(param){
           var
            y$0 = param[2],
            x$0 = param[1],
            param$0 = svg_coords_of_point(ctx[2], [0, x$0, y$0]),
            y = param$0[2],
            x = param$0[1];
           return caml_call3(Stdlib_Printf[4], _c_, x, y);
          },
        _p_ = caml_call2(Stdlib_List[19], string_of_point, vertices),
        points = caml_call2(Stdlib_String[6], cst, _p_),
        _q_ = svg_color_attribute(cst_fill$1, fill$1),
        _r_ = svg_color_attribute(cst_stroke$1, stroke$1);
       return caml_call4(Stdlib_Printf[4], _f_, points, _r_, _q_);
      default:
       var
        shapes = s[1],
        _t_ =
          caml_call2
           (Stdlib_List[19],
            function(_u_){return render_shape(ctx, _u_);},
            shapes);
       return caml_call2(Stdlib_String[6], cst$0, _t_);
    }
   }
   function make_svg(ctx){
    var
     shapes = ctx[1][1],
     _j_ =
       caml_call2
        (Stdlib_List[19],
         function(_k_){return render_shape(ctx, _k_);},
         shapes),
     svg = caml_call2(Stdlib_String[6], cst$1, _j_),
     match = ctx[2],
     height = match[2],
     width = match[1],
     svg$0 = caml_call4(Stdlib_Printf[4], _h_, width, height, svg);
    return svg$0;
   }
   function write(ctx){
    var svg = make_svg(ctx), elt = ctx[4], t2 = caml_jsstring_of_string(svg);
    return elt.innerHTML = t2;
   }
   function show(ctx, shapes){
    var _i_ = caml_call2(Stdlib[37], ctx[1][1], shapes);
    ctx[1][1] = _i_;
    return write(ctx);
   }
   function clear(ctx){ctx[1][1] = 0; return write(ctx);}
   var Joy_Backend_svg = [0, show, create, make_svg, write, clear];
   runtime.caml_register_global(29, Joy_Backend_svg, "Joy__Backend_svg");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Joy__Context
//# unitInfo: Requires: Joy__Backend_cairo, Joy__Backend_lazy, Joy__Backend_svg, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Joy_Backend_svg = global_data.Joy__Backend_svg,
    Stdlib = global_data.Stdlib,
    Joy_Backend_cairo = global_data.Joy__Backend_cairo,
    Joy_Backend_lazy = global_data.Joy__Backend_lazy,
    No_context = [248, "Joy__Context.No_context", caml_fresh_oo_id(0)],
    Unsupported_output_format =
      [248, "Joy__Context.Unsupported_output_format", caml_fresh_oo_id(0)],
    default$0 = [0, [2, caml_call1(Joy_Backend_lazy[2], 0)]],
    cst_SVG_set_line_width_ctx_int = "SVG.set_line_width ctx int",
    cst_Backend_lazy_set_line_widt = "Backend_lazy.set_line_width ctx int",
    cst_SVG_context_cannot_render_ = "SVG context cannot render to PNG",
    cst_Lazy_writePNG_ctx_filename = "Lazy.writePNG ctx filename",
    cst_Cairo_context_cannot_rende = "Cairo context cannot render to SVG",
    cst_Lazy_makeSVG_ctx = "Lazy.makeSVG ctx";
   function get_default(param){return default$0[1];}
   function set_default(ctx){default$0[1] = ctx; return 0;}
   function show(ctx, shapes){
    if(ctx)
     var ctx$0 = ctx[1], ctx$1 = ctx$0;
    else
     var ctx$1 = get_default(0);
    switch(ctx$1[0]){
      case 0:
       var ctx$2 = ctx$1[1];
       return caml_call2(Joy_Backend_cairo[2], ctx$2, shapes);
      case 1:
       var ctx$3 = ctx$1[1];
       return caml_call2(Joy_Backend_svg[1], ctx$3, shapes);
      default:
       var ctx$4 = ctx$1[1];
       return caml_call2(Joy_Backend_lazy[1], ctx$4, shapes);
    }
   }
   function clear(ctx, param){
    if(ctx)
     var ctx$0 = ctx[1], ctx$1 = ctx$0;
    else
     var ctx$1 = get_default(0);
    switch(ctx$1[0]){
      case 0:
       var ctx$2 = ctx$1[1]; return caml_call1(Joy_Backend_cairo[5], ctx$2);
      case 1:
       var ctx$3 = ctx$1[1]; return caml_call1(Joy_Backend_svg[5], ctx$3);
      default:
       var ctx$4 = ctx$1[1]; return caml_call1(Joy_Backend_lazy[3], ctx$4);
    }
   }
   function set_line_width(ctx, int$0){
    if(ctx)
     var ctx$0 = ctx[1], ctx$1 = ctx$0;
    else
     var ctx$1 = get_default(0);
    switch(ctx$1[0]){
      case 0:
       var ctx$2 = ctx$1[1];
       return caml_call2(Joy_Backend_cairo[3], ctx$2, int$0);
      case 1:
       return caml_call1(Stdlib[2], cst_SVG_set_line_width_ctx_int);
      default: return caml_call1(Stdlib[2], cst_Backend_lazy_set_line_widt);
    }
   }
   function writePNG(ctx, filename){
    if(ctx)
     var ctx$0 = ctx[1], ctx$1 = ctx$0;
    else
     var ctx$1 = get_default(0);
    switch(ctx$1[0]){
      case 0:
       var ctx$2 = ctx$1[1];
       return caml_call2(Joy_Backend_cairo[4], ctx$2, filename);
      case 1:
       throw caml_maybe_attach_backtrace
              ([0, Unsupported_output_format, cst_SVG_context_cannot_render_],
               1);
      default: return caml_call1(Stdlib[2], cst_Lazy_writePNG_ctx_filename);
    }
   }
   function makeSVG(ctx, param){
    if(ctx)
     var ctx$0 = ctx[1], ctx$1 = ctx$0;
    else
     var ctx$1 = get_default(0);
    switch(ctx$1[0]){
      case 0:
       throw caml_maybe_attach_backtrace
              ([0, Unsupported_output_format, cst_Cairo_context_cannot_rende],
               1);
      case 1:
       var ctx$2 = ctx$1[1]; return caml_call1(Joy_Backend_svg[3], ctx$2);
      default: return caml_call1(Stdlib[2], cst_Lazy_makeSVG_ctx);
    }
   }
   var
    Joy_Context =
      [0,
       No_context,
       Unsupported_output_format,
       get_default,
       set_default,
       show,
       clear,
       set_line_width,
       makeSVG,
       writePNG];
   runtime.caml_register_global(12, Joy_Context, "Joy__Context");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Joy
//# unitInfo: Requires: Joy__Backend_cairo, Joy__Backend_svg, Joy__Color, Joy__Context, Joy__Random, Joy__Shape, Joy__Transform, Joy__Util
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Joy_Context = global_data.Joy__Context,
    Joy_Backend_svg = global_data.Joy__Backend_svg,
    Joy_Util = global_data.Joy__Util,
    Joy_Color = global_data.Joy__Color,
    Joy_Backend_cairo = global_data.Joy__Backend_cairo,
    Joy_Shape = global_data.Joy__Shape,
    Joy_Transform = global_data.Joy__Transform,
    Joy_Random = global_data.Joy__Random,
    point = Joy_Shape[1],
    circle = Joy_Shape[2],
    rectangle = Joy_Shape[3],
    ellipse = Joy_Shape[4],
    complex = Joy_Shape[5],
    line = Joy_Shape[6],
    polygon = Joy_Shape[7],
    with_stroke = Joy_Shape[8],
    with_fill = Joy_Shape[9],
    translate = Joy_Transform[1],
    scale = Joy_Transform[2],
    rotate = Joy_Transform[3],
    compose = Joy_Transform[4],
    repeat = Joy_Transform[5],
    map_fill = Joy_Transform[6],
    map_stroke = Joy_Transform[7],
    rgb = Joy_Color[1],
    black = Joy_Color[3],
    white = Joy_Color[4],
    red = Joy_Color[5],
    green = Joy_Color[6],
    blue = Joy_Color[7],
    yellow = Joy_Color[8],
    transparent = Joy_Color[9],
    random = Joy_Random[4],
    frandom = Joy_Random[5],
    fractal_noise = Joy_Random[7],
    show = Joy_Context[5],
    clear = Joy_Context[6],
    set_line_width = Joy_Context[7],
    _a_ = [0, 0.5],
    _b_ = [0, 500, 500],
    _c_ = [0, 0.5],
    _d_ = [0, 500, 500],
    cst_joy_png = "joy.png";
   function init(opt, _l_, _k_, param){
    if(opt) var sth = opt[1], size = sth; else var size = _b_;
    if(_l_) var sth$0 = _l_[1], line_width = sth$0; else var line_width = 1;
    if(_k_) var sth$1 = _k_[1], axes = sth$1; else var axes = 0;
    var
     ctx =
       caml_call4(Joy_Backend_cairo[1], Joy_Color[4], size, line_width, axes),
     ctx_container = [0, ctx];
    caml_call1(Joy_Context[4], ctx_container);
    if(! axes) return axes;
    var
     _m_ = ctx[2],
     _n_ =
       caml_call1(caml_call1(Joy_Util[6], function(_q_){return _q_;}), _m_),
     match =
       caml_call1(caml_call1(Joy_Util[6], function(x){return x / 2.;}), _n_),
     half_h = match[2],
     half_w = match[1],
     gray = caml_call4(Joy_Color[2], _a_, 128, 128, 128),
     _o_ = caml_call2(line, [0, [0, - half_w, 0.]], [0, half_w, 0.]),
     x_axis = caml_call1(caml_call1(with_stroke, gray), _o_),
     _p_ = caml_call2(line, [0, [0, 0., - half_h]], [0, 0., half_h]),
     y_axis = caml_call1(caml_call1(with_stroke, gray), _p_);
    return caml_call2(show, [0, ctx_container], [0, x_axis, [0, y_axis, 0]]);
   }
   function init_svg(opt, _e_, eltId){
    if(opt) var sth = opt[1], size = sth; else var size = _d_;
    if(_e_) var sth$0 = _e_[1], axes = sth$0; else var axes = 0;
    var
     ctx = caml_call3(Joy_Backend_svg[2], size, axes, eltId),
     ctx_container = [1, ctx];
    caml_call1(Joy_Context[4], ctx_container);
    if(! axes) return axes;
    var
     _f_ = ctx[2],
     _g_ =
       caml_call1(caml_call1(Joy_Util[6], function(_j_){return _j_;}), _f_),
     match =
       caml_call1(caml_call1(Joy_Util[6], function(x){return x / 2.;}), _g_),
     half_h = match[2],
     half_w = match[1],
     gray = caml_call4(Joy_Color[2], _c_, 128, 128, 128),
     _h_ = caml_call2(line, [0, [0, - half_w, 0.]], [0, half_w, 0.]),
     x_axis = caml_call1(caml_call1(with_stroke, gray), _h_),
     _i_ = caml_call2(line, [0, [0, 0., - half_h]], [0, 0., half_h]),
     y_axis = caml_call1(caml_call1(with_stroke, gray), _i_);
    return caml_call2(show, [0, ctx_container], [0, x_axis, [0, y_axis, 0]]);
   }
   function write(opt, param){
    if(opt) var sth = opt[1], filename = sth; else var filename = cst_joy_png;
    return caml_call2(Joy_Context[9], 0, filename);
   }
   var
    Joy =
      [0,
       point,
       circle,
       rectangle,
       ellipse,
       line,
       polygon,
       complex,
       rotate,
       translate,
       scale,
       compose,
       repeat,
       with_stroke,
       with_fill,
       map_stroke,
       map_fill,
       black,
       white,
       red,
       green,
       blue,
       yellow,
       transparent,
       rgb,
       init,
       init_svg,
       write,
       show,
       clear,
       set_line_width,
       random,
       frandom,
       fractal_noise];
   runtime.caml_register_global(23, Joy, "Joy");
   return;
  }
  (globalThis));
}

//# sourceMappingURL=data:application/json;base64,
